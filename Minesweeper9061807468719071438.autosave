import de.bezier.guido.*;
//Declare and initialize constants NUM_ROWS and NUM_COLS = 20
private MSButton[][] buttons; //2d array of minesweeper buttons
private ArrayList <MSButton> mines; //ArrayList of just the minesweeper buttons that are mined
private int[][] adjacentOffsets = { //x, y offsets used to find adjacent cells
    {-1, 0},
    {0, 1},
    {0, -1},
    {1, 0},
};

public final static int NUM_ROWS = 5;
public final static int NUM_COLS = 5;
private int numMines = 4;

void setup ()
{
    size(400, 400);
    textAlign(CENTER,CENTER);
    
    // make the manager
    Interactive.make( this );
    
    //your code to initialize buttons goes here

    buttons = new MSButton[NUM_ROWS][NUM_COLS];

    mines = new ArrayList<MSButton>();

    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            buttons[row][col] = new MSButton(row, col);
        }
    }
    
    setMines();
}
public void setMines()
{
    //your code
    int i = 0;
    while (i < numMines) {
        int row = (int)(Math.random() * NUM_ROWS);
        int col = (int)(Math.random() * NUM_COLS);
        if (!mines.contains(buttons[row][col])) {
            mines.add(buttons[row][col]);
            i++;
        }
    }
}

public void draw ()
{
    background( 0 );
    if(isWon() == true)
        displayWinningMessage();
}
public boolean isWon()
{
    //your code here
    return false;
}
public void displayLosingMessage()
{
    //your code here
    text("You Lose", width/2, height/2);
}
public void displayWinningMessage()
{
    //your code here
}
public boolean isValid(int r, int c)
{
    //your code here
    return r >= 0 && r < NUM_ROWS && c >= 0 && c < NUM_COLS;
}
public int countMines(int row, int col)
{
    int numMines = 0;
    //your code here
    for (int i = -1; i < 2; i++) {
        for (int j = -1; j < 2; j++) {
            if (isValid(row+i, col+j) &&
                (i != 0 || j != 0) && //dont't check the given cell, which is at i=0, j=0
                mines.contains(buttons[row+i][col+j])
            ) {
                numMines++;
            }
        }
    }

    return numMines;
}
public class MSButton
{
    private int myRow, myCol;
    private float x,y, width, height;
    private boolean clicked, flagged;
    private String myLabel;
    
    public MSButton ( int row, int col )
    {
        width = 400/NUM_COLS;
        height = 400/NUM_ROWS;
        myRow = row;
        myCol = col; 
        x = myCol*width;
        y = myRow*height;
        myLabel = "";
        flagged = clicked = false;
        Interactive.add( this ); // register it with the manager
    }

    // called by manager
    public void mousePressed () 
    {
        //your code here
        //player clicked a mine
        if (mouseButton == RIGHT) {
            this.flagged = !this.flagged;
            //if this.flagged was set to false
            if (!this.flagged) {
                this.clicked = false;
            }
        }
        //left click
        else {
            clicked = true;
            if (mines.contains(this)) {
                displayLosingMessage();
            }
            else {
                this.setLabel(countMines(this.myRow, this.myCol));

                //for all adjacent cells, not diagonal

                //for (int[] offset : adjacentOffsets) {
                    // System.out.println(this.myRow + offset[0] + "\t" + (myCol + offset[1]));
                //    System.out.println(buttons[this.myRow + offset[0]][this.myCol + offset[1]]);
                //}

                int checkRow = this.myRow;
                int checkCol = this.myCol+1;
                if (isValid(this.myRow, this.myCol-1) && !mines.contains(buttons[this.myRow][this.myCol-1])) {
                    buttons[this.myRow][this.myCol-1].mousePressed();
                }
                if (isValid(this.myRow, this.myCol+1) && !mines.contains(buttons[this.myRow][this.myCol+1])) {
                    buttons[this.myRow][this.myCol+1].mousePressed();
                }

                // System.out.println("\t" + mines.contains(buttons[this.myRow+1][this.myCol]));
                // System.out.println(mines.contains(buttons[this.myRow][this.myCol-1]) + "\t" + mines.contains(buttons[this.myRow][this.myCol-1]));
                // System.out.println("\t" + mines.contains(buttons[this.myRow-1][this.myCol]));
                // for (int[] offset : adjacentOffsets) {
                //     if (isValid(this.myRow+offset[0], this.myCol+offset[1]) &&
                //         !mines.contains(buttons[this.myRow+offset[0]][this.myCol+offset[1]])
                //     ) {
                //         buttons[this.myRow+offset[0]][this.myCol+offset[1]].mousePressed();
                //     }
                // }
            }    
        }
    }

    public void draw () 
    {    
        if (flagged)
            fill(0);
         else if( clicked && mines.contains(this) ) 
             fill(255,0,0);
        else if(clicked)
            fill( 200 );
        else 
            fill( 100 );

        rect(x, y, width, height);
        fill(0);
        text(myLabel,x+width/2,y+height/2);
    }
    public void setLabel(String newLabel)
    {
        myLabel = newLabel;
    }
    public void setLabel(int newLabel)
    {
        myLabel = ""+ newLabel;
    }
    public boolean isFlagged()
    {
        return flagged;
    }
}
